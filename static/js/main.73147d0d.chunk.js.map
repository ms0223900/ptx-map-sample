{"version":3,"sources":["ptx-map-sample/config.ts","ptx-map-sample/lib/useMapPosition.ts","ptx-map-sample/lib/PTXHandlers.ts","ptx-map-sample/constants/API.ts","ptx-map-sample/lib/getPTXAuthHeader.ts","ptx-map-sample/lib/fetchData.ts","ptx-map-sample/lib/MrtStationsHandlers.ts","ptx-map-sample/lib/getNearMrtStations.ts","ptx-map-sample/containers/functions/useQueryMrtStations.ts","ptx-map-sample/lib/useFetch.ts","ptx-map-sample/containers/functions/usePtxMapSample.ts","ptx-map-sample/components/MapPart/MapWrapper.tsx","ptx-map-sample/components/ButtonsPart/MrtSearchButton.tsx","ptx-map-sample/components/ButtonsPart/ControlButtons.tsx","ptx-map-sample/components/MapPart/MrtMarkerContent.tsx","ptx-map-sample/components/MapPart/MrtMarker.tsx","ptx-map-sample/components/MapPart/MrtMarkerList.tsx","ptx-map-sample/components/MapPart/MapPart.tsx","ptx-map-sample/containers/PtxMapSample.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DEFAULT_MAP_CENTER","MAP_ZOOM_RADIUS","useMapPosition","options","useState","zoom","center","position","mapViewPort","setMapViewPort","handleSetMapViewPort","useCallback","viewPort","useEffect","JSON","stringify","PTXHandlers","mrtPos","PositionLat","PositionLon","name","Zh_tw","stationId","stationIds","map","s","makeEqFilterStr","join","uri","joinedFilterConditionStr","this","joinStationIDsFilterStr","getMrtNearStationsUrl","lat","lon","radius","getPTXAuthHeader","GMTString","Date","toUTCString","ShaObj","jsSHA","setHMACKey","process","update","Authorization","getHMAC","a","defaultRes","requestInit","response","fetch","then","res","json","catch","rej","console","log","fetchDataByAPIWithCors","MrtStationsHandlers","mrtStationName","locationEstimateTimeListData","stationLiveInfo","getLocationLocaleName","DestinationStationName","estimateTime","EstimateTime","mrtLiveInfoStations","filter","StationID","makeSingleLocationEstimateTime","mrtStations","mrtStationLiveInfos","getSingleStationLocationEstimateTimes","getPositionFromStationPosition","StationPosition","StationName","makeSingleMrtMarkerData","getNearMrtStations","header","nearStationUri","fetchData","headers","useCorsPrefix","mrtNearStations","length","stationsLiveInfoUri","getAPIWithStationIDsFilter","makeMrtMarkerListDataFromRaw","useQueryMrtStations","getRadiusFromMapZoom","fetchedState","apiPath","initResponseData","fetchFn","loading","setLoading","error","setErr","responseData","setResponseData","handleFetchData","finally","useFetch","fetchOptions","handleFetchMrtStations","usePtxMapSample","queriedMrtStationsState","useStyles","makeStyles","theme","root","width","height","MapWrapper","props","children","classes","Box","className","style","TileLayer","opacity","url","MrtSearchButton","onSearchMrtStations","Button","variant","onClick","src","alt","ControlButtons","MrtMarkerContent","Typography","Divider","l","i","key","MrtMarker","icon","L","iconUrl","iconSize","Marker","Popup","autoPan","MrtMarkerList","markerListData","m","MapPart","onViewportChanged","PtxMapSample","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4OAEaA,EAA+B,CAAC,UAAW,YAY3CC,EACR,IADQA,EAER,IAFQA,EAGR,IAHQA,EAIN,IAJMA,EAKN,ICkBQC,EA3BQ,SAACC,GAAoC,IAAD,EACnBC,mBAAS,CAC7CC,KDT4B,GCU5BC,OAAQH,EAAQI,WAHuC,mBAClDC,EADkD,KACrCC,EADqC,KAMnDC,EAAuBC,uBAAY,SAACC,GACxCA,EAASN,QAAUG,EAAe,eAC7BG,EAD4B,CAE/BN,OAAQM,EAASN,YAElB,IAUH,OARAO,qBAAU,WACRJ,EAAe,CACbJ,KAAMF,EAAQE,KACdC,OAAQH,EAAQI,aAGjB,CAACO,KAAKC,UAAUZ,KAEX,CACNK,cACAE,yB,yCCcWM,E,4HAvCyBC,GACpC,MAAO,CAACA,EAAOC,YAAaD,EAAOE,e,4CAGRC,GAC3B,OAAO,WACL,OAAOA,EAAKC,S,sCAIOC,GACrB,MAAM,iBAAN,OAAwBA,EAAxB,O,8CAG6BC,GAG7B,OAFqBA,EAAWC,KAAI,SAAAC,GAAC,OAAIT,EAAYU,gBAAgBD,MAC5CE,KAnBE,U,iDAuBKC,EAAaL,GAC7C,IAAMM,EAA2BC,KAAKC,wBAAwBR,GAE9D,MADS,UAAMK,GAAN,OAAYC,K,2CAIKxB,GAC1B,OAAIA,GAAQA,EAAO,GACVJ,EACG,KAATI,EACMJ,EACG,KAATI,EACMJ,EACG,KAATI,EACMJ,EACFA,M,KChCE+B,EAAwB,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,IAAKC,EAAb,EAAaA,OAAb,iIACmFF,EADnF,YAC0FC,EAD1F,YACiGC,EADjG,M,QCQtBC,EAhBU,WACvB,IAAIC,GAAY,IAAIC,MAAOC,cACvBC,EAAS,IAAIC,IAAM,QAAS,QAQhC,OANAD,EAAOE,WDHPC,8BCG+B,QAC/BH,EAAOI,OAAO,WAAaP,GAKpB,CACLQ,cAHkB,yGADTL,EAAOM,QAAQ,OACqG,IAI7H,SAAUT,I,4CCRd,mCAAAU,EAAA,6DACEnB,EADF,EACEA,IACAoB,EAFF,EAEEA,WACAC,EAHF,EAGEA,YAEIC,EAAWF,EALjB,SAOQG,MAAMvB,EAAD,eACNqB,IAEFG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACJH,EAAWG,KAEZE,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAd9B,gCAeSN,GAfT,4C,sBAkBeS,M,4CCsCAC,E,wHAxCX,MALiC,CAC/BrD,SAFoD,EADtDA,SAIEsD,eAHoD,EAD5CA,eAKRC,6BAJoD,EAD5BA,gC,qDAUUC,GACpC,OAAO,WAKL,MAJwC,CACtC3C,KAAMJ,EAAYgD,sBAAsBD,EAAgBE,uBAAlDjD,GACNkD,aAAcH,EAAgBI,iB,4DAMS7C,EAAe8C,GAAkD,IAAD,OAC3G,OAAO,WAIL,OAFwBA,EAAoBC,QAAO,SAAA5C,GAAC,OAAIA,EAAE6C,YAAchD,KAClDE,KAAI,SAAAC,GAAC,OAAI,EAAK8C,+BAA+B9C,EAApC,S,mDAKC+C,EAAwCC,GAC1E,OAAO,WAYL,OAXmCD,EAAYhD,KAAI,SAAAC,GACjD,IAAMqC,EAA+BF,EAAoBc,sCAAsCjD,EAAE6C,UAAWG,EAAvEb,GAC/BrD,EAAWS,EAAY2D,+BAA+BlD,EAAEmD,iBACxDf,EAAiB7C,EAAYgD,sBAAsBvC,EAAEoD,YAApC7D,GAEvB,OAAO4C,EAAoBkB,wBAAwB,CACjDvE,WACAsD,iBACAC,yC,KCRKiB,EAnCS,uCAAG,WAAO5E,GAAP,2BAAA4C,EAAA,6DACrBM,EAA6B,GAE3B2B,EAAS5C,IACT6C,EAAiBjD,EAAsB7B,GAJpB,SAMK+E,EAAqC,CACjEtD,IAAKqD,EACLhC,YAAa,CACXkC,QAASH,GAEXhC,WAAY,GACZoC,eAAe,IAZQ,UAMnBC,EANmB,UAcnB9D,EAAa8D,EAAgB7D,KAAI,SAAAC,GAAC,OAAIA,EAAE6C,cAEhCgB,OAAS,GAhBE,wBAkBjBC,EAAsBvE,EAAYwE,2BJf1C7C,wFIeiGpB,GAlBxE,UAmBW2D,EAAsC,CACtEtD,IAAK2D,EACLtC,YAAa,CACXkC,QAASH,GAEXhC,WAAY,GACZoC,eAAe,IAzBM,QAmBjBhB,EAnBiB,OA2BvBf,EAAMO,EAAoB6B,6BAA6BJ,EAAiBjB,EAAlER,GACNH,QAAQC,IAAI2B,EAAiBjB,GA5BN,iCAgClBf,GAhCkB,4CAAH,sDCAxB,IA4BeqC,EA5Ba,SAAC,GAEU,IADrCnF,EACoC,EADpCA,SAAUF,EAC0B,EAD1BA,KAEJ8B,EAASnB,EAAY2E,qBAAqBtF,GAY1CuF,EClBO,YAES,IADtBC,EACqB,EADrBA,QAASC,EACY,EADZA,iBAAkBC,EACN,EADMA,QACN,EACS3F,oBAAkB,GAD3B,mBACd4F,EADc,KACLC,EADK,OAEG7F,qBAFH,mBAEd8F,EAFc,KAEPC,EAFO,OAGmB/F,mBAAY0F,GAH/B,mBAGdM,EAHc,KAGAC,EAHA,KAuBrB,MAAO,CACLL,UACAE,QACAI,gBArBsB3F,uBAAY,WAClCsF,GAAW,IACWF,EAAUA,IAAYb,EAAU,CACpDtD,IAAKiE,EACL7C,WAAY8C,KAIX1C,MAAK,SAAAC,GAAG,OAAIgD,EAAgBhD,MAC5BE,OAAM,SAAA2C,GACLzC,QAAQyC,MAAMA,GACdC,EAAOD,MAERK,SAAQ,WACPN,GAAW,QAEd,CAACJ,EAASE,EAASD,IAMpBM,gBDXmBI,CAAgC,CACnDX,QAAS,GACTC,iBAAkB,GAClBC,QAb6BpF,sBAAW,sBAAC,8BAAAoC,EAAA,6DACnC0D,EAAuC,CAC3CxE,IAAK1B,EAAS,GACd2B,IAAK3B,EAAS,GACd4B,UAJuC,SAMvB4C,EAAmB0B,GANI,cAMnCpD,EANmC,yBAOlCA,GAPkC,2CAQxC,CAAC9C,EAAU4B,MAQd,OAAO,eACFyD,EADL,CAEEpB,YAAaoB,EAAaQ,aAC1BM,uBAAwBd,EAAaU,mBEP1BK,EAzBS,WAAO,IAAD,EAIxBzG,EAAe,CACjBK,SAAUP,EACVK,KVP4B,KUG5BG,EAF0B,EAE1BA,YACAE,EAH0B,EAG1BA,qBAOAJ,EACEE,EADFF,OAAQD,EACNG,EADMH,KAMJuG,EAA0BlB,EAJZ,CAClBnF,SAAUD,EAAQD,SAKpB,OAAO,aACLG,cACAE,wBACGkG,I,gCClBDC,G,MAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,MAAO,OACPC,OAAQ,UAkCGC,EA9BI,SAACC,GAA4B,IAE5CC,EACED,EADFC,SAGIC,EAAUT,IAEhB,OACE,kBAACU,EAAA,EAAD,eACEC,UAAWF,EAAQN,MACfI,GAEJ,kBAAC,IAAD,eACEK,MAAO,CACLP,OAAQ,QAEV7G,KX3BwB,GW4BxBC,OAAQ8G,EAAM7G,UACV6G,GAEJ,kBAACM,EAAA,EAAD,CACEC,QAAS,GACTC,IX/BkB,gFWiCnBP,K,yBCpBMQ,EAbS,SAAC,GAEI,IAD3BC,EAC0B,EAD1BA,oBAEA,OACE,kBAACC,EAAA,EAAD,CAAQC,QAAS,YAAaC,QAASH,GACrC,yBACEI,IZCoB,uDYApBC,IAAK,eCEEC,EARQ,SAAChB,GACtB,OACE,kBAAC,IAAD,CAAS7G,SAAU,eACjB,kBAAC,EAAoB6G,K,gDCeZiB,EApBU,SAAC,GAEI,IAD5BxE,EAC2B,EAD3BA,eAAgBC,EACW,EADXA,6BAEhB,OACE,kBAACyD,EAAA,EAAD,KACE,kBAACe,EAAA,EAAD,CAAYN,QAAS,MAClBnE,GAEH,kBAAC0E,EAAA,EAAD,MACCzE,EAA6BtC,KAAI,SAACgH,EAAGC,GAAJ,OAChC,oCACE,kBAACH,EAAA,EAAD,CAAYI,IAAKD,GAAjB,gBACOD,EAAEpH,KADT,uBACkBoH,EAAEtE,aADpB,iBCWKyE,EAlBG,SAACvB,GACjB,IAAMwB,EAAOC,IAAED,KAAK,CAClBE,QfC0B,uCeA1BC,SAAU,CAAC,GAAI,MAGjB,OACE,kBAACC,EAAA,EAAD,CACEJ,KAAMA,EACNrI,SAAU6G,EAAM7G,UAEhB,kBAAC0I,EAAA,EAAD,CAAOC,SAAS,GACd,kBAAC,EAAqB9B,MCLf+B,EAVO,SAAC/B,GACrB,OACE,oCACGA,EAAMgC,eAAe5H,KAAI,SAAC6H,EAAGZ,GAAJ,OACxB,kBAAC,EAAD,eAAWC,IAAKD,GAAOY,SCqBhBC,EAxBC,SAAC,GAMI,IALnBjJ,EAKkB,EALlBA,KACAE,EAIkB,EAJlBA,SACA6I,EAGkB,EAHlBA,eACAtB,EAEkB,EAFlBA,oBACAyB,EACkB,EADlBA,kBAEA,OACE,kBAAC,EAAD,CACEhJ,SAAUA,EACVF,KAAMA,EACNkJ,kBAAmBA,GAEnB,kBAAC,EAAD,CAIEH,eAAgBA,IAElB,kBAAC,EAAD,CAAgBtB,oBAAqBA,MCD5B0B,EApBM,WAAO,IAAD,EAOrB7C,IAJFnC,GAHuB,EAEvBwB,QAFuB,EAGvBxB,aACAhE,EAJuB,EAIvBA,YACAkG,EALuB,EAKvBA,uBACAhG,EANuB,EAMvBA,qBAGF,OACE,kBAAC,EAAD,CACEH,SAAUC,EAAYF,OACtBD,KAAMG,EAAYH,KAClB+I,eAAgB5E,EAChBsD,oBAAqBpB,EACrB6C,kBAAmB7I,KCPV+I,MARf,WACE,OACE,oCACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlH,MAAK,SAAAmH,GACJA,EAAaC,gBAEdjH,OAAM,SAAA2C,GACLzC,QAAQyC,MAAMA,EAAMuE,c","file":"static/js/main.73147d0d.chunk.js","sourcesContent":["import { Position } from \"common-types\";\r\n\r\nexport const DEFAULT_MAP_CENTER: Position = [22.631411, 120.301915];\r\nexport const DEFAULT_MAP_ZOOM = 14;\r\n\r\nexport const MAP_TILE_URL = 'https://wmts.nlsc.gov.tw/wmts/EMAP/default/GoogleMapsCompatible/{z}/{y}/{x}';\r\n// 國土測繪中心map\r\n\r\n// export const MAP_TILE_URL = 'http://{s}.tile.osm.org/{z}/{x}/{y}.png' \r\n// open street map\r\n\r\nexport const ICON_IMAGE_URL = './asset/images/icons/icon-marker.svg';\r\nexport const ICON_MRT_URL = './asset/images/icons/icon-directions_subway-24px.svg';\r\n\r\nexport const MAP_ZOOM_RADIUS = {\r\n  s: 3000, //meter 公尺\r\n  m: 5000,\r\n  l: 7000,\r\n  min: 3000,\r\n  max: 10000,\r\n};","import { useState, useEffect, useCallback } from \"react\";\r\nimport { Position } from \"common-types\";\r\nimport { Viewport } from \"react-leaflet\";\r\nimport { DEFAULT_MAP_ZOOM } from \"../config\";\r\n\r\nexport interface UseMapPositionOptions {\r\n  zoom?: number | undefined\r\n  position: Position\r\n}\r\n\r\nconst useMapPosition = (options: UseMapPositionOptions) => {\r\n  const [mapViewPort, setMapViewPort] = useState({\r\n    zoom: DEFAULT_MAP_ZOOM as number | undefined | null,\r\n    center: options.position,\r\n  });\r\n\r\n  const handleSetMapViewPort = useCallback((viewPort: Viewport) => {\r\n    viewPort.center && setMapViewPort({\r\n      ...viewPort,\r\n      center: viewPort.center,\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setMapViewPort({\r\n      zoom: options.zoom,\r\n      center: options.position\r\n    });\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [JSON.stringify(options)]);\r\n\r\n  return ({\r\n    mapViewPort,\r\n    handleSetMapViewPort,\r\n  });\r\n};\r\n\r\nexport default useMapPosition;","import { ID } from \"common-types\";\r\nimport { MAP_ZOOM_RADIUS } from \"../config\";\r\nimport { MrtNameType, MrtStationPosition } from \"ptx-map-sample\";\r\nimport { Position } from \"common-types\";\r\n\r\nconst ODATA_FILTER_CONDITION = ' or ';\r\n\r\nclass PTXHandlers {\r\n  static getPositionFromStationPosition(mrtPos: MrtStationPosition): Position {\r\n    return [mrtPos.PositionLat, mrtPos.PositionLon];\r\n  }\r\n\r\n  static getLocationLocaleName(name: MrtNameType) {\r\n    return () => { // 如果有使用intl可以修改此method為(locale) => { //... }\r\n      return name.Zh_tw;\r\n    };\r\n  }\r\n\r\n  static makeEqFilterStr(stationId: ID) {\r\n    return `StationID eq '${stationId}'`;\r\n  }\r\n\r\n  static joinStationIDsFilterStr(stationIds: ID[]) {\r\n    const eqStationIds = stationIds.map(s => PTXHandlers.makeEqFilterStr(s)); \r\n    const res = eqStationIds.join(ODATA_FILTER_CONDITION);\r\n    return res;\r\n  }\r\n\r\n  static getAPIWithStationIDsFilter(uri: string, stationIds: ID[]): string {\r\n    const joinedFilterConditionStr = this.joinStationIDsFilterStr(stationIds);\r\n    const res = `${uri}${joinedFilterConditionStr}`;\r\n    return res;\r\n  }\r\n\r\n  static getRadiusFromMapZoom(zoom?: number | null) {\r\n    if(!zoom || zoom < 13) \r\n      return MAP_ZOOM_RADIUS.max;  \r\n    if(zoom === 15)\r\n      return MAP_ZOOM_RADIUS.s;\r\n    if(zoom === 14)\r\n      return MAP_ZOOM_RADIUS.m;\r\n    if(zoom === 13)\r\n      return MAP_ZOOM_RADIUS.l;\r\n    return MAP_ZOOM_RADIUS.min;\r\n  }\r\n}\r\n\r\nexport default PTXHandlers;","export const PTX_APP_ID = \r\n  process.env.REACT_APP_PTX_APP_ID as string;\r\n  \r\nexport const PTX_APP_KEY = \r\n  process.env.REACT_APP_PTX_APP_KEY as string; \r\n\r\nexport interface GetMrtNearStationsUrlOptions {\r\n  lat: number | string\r\n  lon: number | string\r\n  radius: number\r\n}\r\nexport const getMrtNearStationsUrl = ({ lat, lon, radius, }: GetMrtNearStationsUrlOptions) => \r\n  `https://ptx.transportdata.tw/MOTC/v2/Rail/Metro/Station/KRTC?&\\$format=JSON&\\$spatialFilter=nearby(StationPosition,${lat},${lon},${radius})`;\r\n\r\nexport const MRT_STATIONS_LIVE_INFO_API = \r\n  process.env.REACT_APP_MRT_LIVE_INFO_API as string;","import jsSHA from 'jssha';\r\nimport { PTX_APP_KEY, PTX_APP_ID } from '../constants/API';\r\n\r\nconst getPTXAuthHeader = () => {\r\n  var GMTString = new Date().toUTCString();\r\n  var ShaObj = new jsSHA('SHA-1', 'TEXT');\r\n\r\n  ShaObj.setHMACKey(PTX_APP_KEY, 'TEXT');\r\n  ShaObj.update('x-date: ' + GMTString);\r\n\r\n  var HMAC = ShaObj.getHMAC('B64');\r\n  var Authorization = 'hmac username=\\\"' + PTX_APP_ID + '\\\", algorithm=\\\"hmac-sha1\\\", headers=\\\"x-date\\\", signature=\\\"' + HMAC + '\\\"';\r\n\r\n  return { \r\n    Authorization, \r\n    'X-Date': GMTString\r\n  };\r\n};\r\n\r\nexport default getPTXAuthHeader;","export interface FetchDataByAPIOptions<DefaultRes> {\r\n  uri: string\r\n  requestInit?: RequestInit\r\n  useCorsPrefix?: boolean\r\n  defaultRes: DefaultRes\r\n}\r\n\r\nasync function fetchDataByAPIWithCors<DefaultRes>({\r\n  uri, \r\n  defaultRes,\r\n  requestInit,\r\n}: FetchDataByAPIOptions<DefaultRes>) {\r\n  let response = defaultRes;\r\n  \r\n  await fetch(uri, {\r\n    ...requestInit,\r\n  })\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      response = res;\r\n    })\r\n    .catch(rej => console.log(rej));\r\n  return response;\r\n}\r\n\r\nexport default fetchDataByAPIWithCors;","import { Position } from \"common-types\";\r\nimport { SingleLocationEstimateTime, SingleMrtMarkerData } from \"../components/MapPart/types\";\r\nimport { ID } from \"common-types\";\r\nimport { SingleMrtStationLiveInfo, SingleMrtStationRawData } from \"ptx-map-sample\";\r\nimport PTXHandlers from \"./PTXHandlers\";\r\n\r\n// method中用() => () => any 的形式，是為了多語系的用途留下locale的參數接口\r\n\r\nexport interface MakeSingleMrtMarkerDataOptions {\r\n  mrtStationName: string\r\n  position: Position\r\n  locationEstimateTimeListData: SingleLocationEstimateTime[]\r\n}\r\n\r\nclass MrtStationsHandlers {\r\n  static makeSingleMrtMarkerData({\r\n    position, mrtStationName, locationEstimateTimeListData,\r\n  }: MakeSingleMrtMarkerDataOptions): SingleMrtMarkerData {\r\n    const res: SingleMrtMarkerData = {\r\n      position,\r\n      mrtStationName,\r\n      locationEstimateTimeListData,\r\n    };\r\n    return res;\r\n  }\r\n\r\n  static makeSingleLocationEstimateTime(stationLiveInfo: SingleMrtStationLiveInfo) {\r\n    return (): SingleLocationEstimateTime => {\r\n      const res: SingleLocationEstimateTime = {\r\n        name: PTXHandlers.getLocationLocaleName(stationLiveInfo.DestinationStationName)(),\r\n        estimateTime: stationLiveInfo.EstimateTime,\r\n      };\r\n      return res;\r\n    };\r\n  }\r\n\r\n  static getSingleStationLocationEstimateTimes(stationId: ID, mrtLiveInfoStations: SingleMrtStationLiveInfo[]) {\r\n    return (): SingleLocationEstimateTime[] => {\r\n      let res: SingleLocationEstimateTime[] = [];\r\n      const matchedStations = mrtLiveInfoStations.filter(s => s.StationID === stationId);\r\n      res = matchedStations.map(s => this.makeSingleLocationEstimateTime(s)());\r\n      return res;\r\n    };\r\n  }\r\n\r\n  static makeMrtMarkerListDataFromRaw(mrtStations: SingleMrtStationRawData[], mrtStationLiveInfos: SingleMrtStationLiveInfo[]) {\r\n    return () => {\r\n      const res: SingleMrtMarkerData[] = mrtStations.map(s => {\r\n        const locationEstimateTimeListData = MrtStationsHandlers.getSingleStationLocationEstimateTimes(s.StationID, mrtStationLiveInfos)();\r\n        const position = PTXHandlers.getPositionFromStationPosition(s.StationPosition);\r\n        const mrtStationName = PTXHandlers.getLocationLocaleName(s.StationName)();\r\n\r\n        return MrtStationsHandlers.makeSingleMrtMarkerData({\r\n          position,\r\n          mrtStationName,\r\n          locationEstimateTimeListData,\r\n        });\r\n      });\r\n      return res;\r\n    };\r\n  }\r\n}\r\n\r\nexport default MrtStationsHandlers;","import { MRT_STATIONS_LIVE_INFO_API, getMrtNearStationsUrl, GetMrtNearStationsUrlOptions } from \"../constants/API\";\r\nimport getPTXAuthHeader from \"./getPTXAuthHeader\";\r\nimport fetchData from './fetchData';\r\nimport { SingleMrtStationRawData, SingleMrtStationLiveInfo } from \"ptx-map-sample\";\r\nimport PTXHandlers from \"./PTXHandlers\";\r\nimport MrtStationsHandlers from \"./MrtStationsHandlers\";\r\nimport { SingleMrtMarkerData } from \"../components/MapPart/types\";\r\n\r\nexport interface GetNearStationsOptions extends GetMrtNearStationsUrlOptions {\r\n  \r\n}\r\n\r\nconst getNearMrtStations = async (options: GetNearStationsOptions) => {\r\n  let res: SingleMrtMarkerData[] = [];\r\n\r\n  const header = getPTXAuthHeader();\r\n  const nearStationUri = getMrtNearStationsUrl(options);\r\n\r\n  const mrtNearStations = await fetchData<SingleMrtStationRawData[]>({\r\n    uri: nearStationUri,\r\n    requestInit: {\r\n      headers: header,\r\n    },\r\n    defaultRes: [],\r\n    useCorsPrefix: false,\r\n  });\r\n  const stationIds = mrtNearStations.map(s => s.StationID);\r\n  \r\n  if(stationIds.length > 0) {\r\n    // 會取得兩倍的資料(含去返程 departure, destination)\r\n    const stationsLiveInfoUri = PTXHandlers.getAPIWithStationIDsFilter(MRT_STATIONS_LIVE_INFO_API, stationIds);\r\n    const mrtLiveInfoStations = await fetchData<SingleMrtStationLiveInfo[]>({\r\n      uri: stationsLiveInfoUri,\r\n      requestInit: {\r\n        headers: header,\r\n      },\r\n      defaultRes: [],\r\n      useCorsPrefix: false,\r\n    });\r\n    res = MrtStationsHandlers.makeMrtMarkerListDataFromRaw(mrtNearStations, mrtLiveInfoStations)();\r\n    console.log(mrtNearStations, mrtLiveInfoStations);\r\n\r\n  }\r\n\r\n  return res;\r\n};\r\n\r\nexport default getNearMrtStations;","import { Position } from \"common-types\";\r\nimport PTXHandlers from \"../../lib/PTXHandlers\";\r\nimport getNearMrtStations, { GetNearStationsOptions } from \"../../lib/getNearMrtStations\";\r\nimport { useCallback } from \"react\";\r\nimport useFetch from \"../../lib/useFetch\";\r\nimport { SingleMrtMarkerData } from \"../../components/MapPart/types\";\r\n\r\nexport interface UseQueryMrtBikeStationsOptions {\r\n  position: Position\r\n  zoom?: number | null\r\n}\r\n\r\nconst useQueryMrtStations = ({\r\n  position, zoom\r\n}: UseQueryMrtBikeStationsOptions) => {\r\n  const radius = PTXHandlers.getRadiusFromMapZoom(zoom);\r\n\r\n  const handleQueryMrtStations = useCallback(async () => {\r\n    const fetchOptions: GetNearStationsOptions = {\r\n      lat: position[0],\r\n      lon: position[1],\r\n      radius,\r\n    };\r\n    const res = await getNearMrtStations(fetchOptions);\r\n    return res;\r\n  }, [position, radius]);\r\n  \r\n  const fetchedState = useFetch<SingleMrtMarkerData[]>({\r\n    apiPath: '', // just for fulfill type\r\n    initResponseData: [],\r\n    fetchFn: handleQueryMrtStations,\r\n  });\r\n\r\n  return ({\r\n    ...fetchedState,\r\n    mrtStations: fetchedState.responseData,\r\n    handleFetchMrtStations: fetchedState.handleFetchData,\r\n  });\r\n};\r\n\r\nexport default useQueryMrtStations;","import { useState, useCallback } from \"react\";\r\nimport fetchData from \"./fetchData\";\r\n\r\nexport interface UseFetchOptions<Res> {\r\n  apiPath: string\r\n  initResponseData: Res\r\n  fetchFn?: () => Promise<Res>\r\n}\r\n\r\nexport default function useFetch<T>({\r\n  apiPath, initResponseData, fetchFn,\r\n}: UseFetchOptions<T>) {\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setErr] = useState();\r\n  const [responseData, setResponseData] = useState<T>(initResponseData);\r\n\r\n  const handleFetchData = useCallback(() => {\r\n    setLoading(true);\r\n    const fetchCallback = fetchFn ? fetchFn() : fetchData({ // support fetch function or from uri\r\n      uri: apiPath,\r\n      defaultRes: initResponseData,\r\n    });\r\n\r\n    fetchCallback\r\n      .then(res => setResponseData(res))\r\n      .catch(error => {\r\n        console.error(error);\r\n        setErr(error);\r\n      })\r\n      .finally(() => {\r\n        setLoading(false);\r\n      });\r\n  }, [apiPath, fetchFn, initResponseData]);\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    handleFetchData,\r\n    responseData\r\n  };\r\n}","import useMapPosition from \"../../lib/useMapPosition\";\r\nimport { DEFAULT_MAP_CENTER, DEFAULT_MAP_ZOOM } from \"../../config\";\r\nimport useQueryMrtStations from \"./useQueryMrtStations\";\r\n\r\nconst usePtxMapSample = () => {\r\n  const {\r\n    mapViewPort,\r\n    handleSetMapViewPort,\r\n  } = useMapPosition({\r\n    position: DEFAULT_MAP_CENTER,\r\n    zoom: DEFAULT_MAP_ZOOM,\r\n  });\r\n\r\n  const {\r\n    center, zoom\r\n  } = mapViewPort;\r\n  const queryParams = {\r\n    position: center, zoom,\r\n  };\r\n\r\n  const queriedMrtStationsState = useQueryMrtStations(queryParams);\r\n\r\n  return ({\r\n    mapViewPort,\r\n    handleSetMapViewPort,\r\n    ...queriedMrtStationsState,\r\n  });\r\n};\r\n\r\nexport default usePtxMapSample;","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { MapWrapperProps } from \"./types\";\r\nimport { Box, makeStyles } from \"@material-ui/core\";\r\nimport { MAP_TILE_URL, DEFAULT_MAP_ZOOM } from \"../../config\";\r\nimport '../../../style/styles.scss';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    height: 600,\r\n  }\r\n}));\r\n\r\nconst MapWrapper = (props: MapWrapperProps) => {\r\n  const {\r\n    children,\r\n  } = props;\r\n  \r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box\r\n      className={classes.root}\r\n      {...props}\r\n    >\r\n      <LeafletMap\r\n        style={{\r\n          height: \"100%\",\r\n        }}\r\n        zoom={DEFAULT_MAP_ZOOM}\r\n        center={props.position}\r\n        {...props}\r\n      >\r\n        <TileLayer\r\n          opacity={0.9}\r\n          url={MAP_TILE_URL}\r\n        />\r\n        {children}\r\n      </LeafletMap>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MapWrapper;\r\n","import React from 'react';\r\nimport { Box, Button } from '@material-ui/core';\r\nimport { MrtSearchButtonProps } from './types';\r\nimport { ICON_MRT_URL } from '../../config';\r\n\r\nconst MrtSearchButton = ({\r\n  onSearchMrtStations\r\n}: MrtSearchButtonProps) => {\r\n  return (\r\n    <Button variant={'contained'} onClick={onSearchMrtStations}>\r\n      <img \r\n        src={ICON_MRT_URL}\r\n        alt={'mrt-icon'}\r\n      />\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default MrtSearchButton;","import React from 'react';\r\nimport { Box } from '@material-ui/core';\r\nimport Control from 'react-leaflet-control';\r\nimport MrtSearchButton from './MrtSearchButton';\r\nimport { ControlButtonsProps } from './types';\r\n\r\nconst ControlButtons = (props: ControlButtonsProps) => {\r\n  return (\r\n    <Control position={'bottomright'}>\r\n      <MrtSearchButton {...props} />\r\n    </Control>\r\n  );\r\n};\r\n\r\nexport default ControlButtons;","import React from 'react';\r\nimport { Box, Typography, Divider } from '@material-ui/core';\r\nimport { MrtMarkerContentProps } from './types';\r\n\r\nconst MrtMarkerContent = ({\r\n  mrtStationName, locationEstimateTimeListData,\r\n}: MrtMarkerContentProps) => {\r\n  return (\r\n    <Box>\r\n      <Typography variant={'h6'}>\r\n        {mrtStationName}\r\n      </Typography>\r\n      <Divider />\r\n      {locationEstimateTimeListData.map((l, i) => (\r\n        <>\r\n          <Typography key={i}>\r\n            {`往${l.name}：約${l.estimateTime}分`}\r\n          </Typography>\r\n        </>\r\n      ))}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MrtMarkerContent;","import React from 'react';\r\nimport { Box } from '@material-ui/core';\r\nimport L from 'leaflet';\r\nimport { Marker, Popup } from 'react-leaflet';\r\nimport MrtMarkerContent from './MrtMarkerContent';\r\nimport { MrtMarkerProps } from './types';\r\nimport { ICON_IMAGE_URL } from '../../config';\r\n\r\nconst MrtMarker = (props: MrtMarkerProps) => {\r\n  const icon = L.icon({\r\n    iconUrl: ICON_IMAGE_URL,\r\n    iconSize: [24, 34],\r\n  });\r\n\r\n  return (\r\n    <Marker \r\n      icon={icon}\r\n      position={props.position}\r\n    >\r\n      <Popup autoPan={false}>\r\n        <MrtMarkerContent {...props} />\r\n      </Popup>\r\n    </Marker>\r\n  );\r\n};\r\n\r\nexport default MrtMarker;","import React from 'react';\r\nimport { Box } from '@material-ui/core';\r\nimport MrtMarker from './MrtMarker';\r\nimport { MrtMarkerListProps } from './types';\r\n\r\nconst MrtMarkerList = (props: MrtMarkerListProps) => {\r\n  return (\r\n    <>\r\n      {props.markerListData.map((m, i) => (\r\n        <MrtMarker key={i} {...m} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MrtMarkerList;","import React from 'react';\r\nimport MapWrapper from './MapWrapper';\r\nimport ControlButtons from '../ButtonsPart/ControlButtons';\r\nimport MrtMarkerList from './MrtMarkerList';\r\nimport { MapPartProps } from './types';\r\n\r\nconst MapPart = ({\r\n  zoom,\r\n  position,\r\n  markerListData,\r\n  onSearchMrtStations,\r\n  onViewportChanged\r\n}: MapPartProps) => {\r\n  return (\r\n    <MapWrapper\r\n      position={position}\r\n      zoom={zoom}\r\n      onViewportChanged={onViewportChanged}\r\n    >\r\n      <MrtMarkerList \r\n        // position={DEFAULT_MAP_CENTER} \r\n        // locationEstimateTimeListData={[]} \r\n        // mrtStationName={'美麗島'} \r\n        markerListData={markerListData}\r\n      />\r\n      <ControlButtons onSearchMrtStations={onSearchMrtStations} />\r\n    </MapWrapper>\r\n  );\r\n};\r\n\r\nexport default MapPart;","import React from 'react';\r\nimport usePtxMapSample from './functions/usePtxMapSample';\r\nimport MapPart from '../components/MapPart/MapPart';\r\n\r\nconst PtxMapSample = () => {\r\n  const {\r\n    loading,\r\n    mrtStations,\r\n    mapViewPort,\r\n    handleFetchMrtStations,\r\n    handleSetMapViewPort\r\n  } = usePtxMapSample();\r\n\r\n  return (\r\n    <MapPart \r\n      position={mapViewPort.center}\r\n      zoom={mapViewPort.zoom as number}\r\n      markerListData={mrtStations}\r\n      onSearchMrtStations={handleFetchMrtStations}\r\n      onViewportChanged={handleSetMapViewPort}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PtxMapSample;","import React from 'react';\r\nimport MapPart from './ptx-map-sample/components/MapPart/MapPart';\r\nimport PtxMapSample from './ptx-map-sample/containers/PtxMapSample';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <PtxMapSample />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}